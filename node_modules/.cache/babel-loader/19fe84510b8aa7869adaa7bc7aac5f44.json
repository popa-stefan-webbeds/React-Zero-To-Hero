{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\StefanPopa\\\\Desktop\\\\Learning\\\\Learning\\\\TodoApp\\\\React-Zero-To-Hero\\\\react-task-tracker\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_ADDRESS = 'https://localhost:5001';\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks(SERVER_ADDRESS + '/tasks');\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async route => {\n    const res = await fetch(route);\n    const data = await res.json();\n    console.log(data);\n    return data;\n  };\n\n  const onShowAdd = () => setShowAddTask(!showAddTask);\n\n  const addTask = async newTask => {\n    const res = await fetch(`${SERVER_ADDRESS}/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTask)\n    });\n    const data = await res.json();\n    console.log(data);\n    setTasks([...tasks, data]);\n  };\n\n  const deleteTask = async id => {\n    await fetch(`${SERVER_ADDRESS}/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    console.log('delete', id);\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleChecked = async id => {\n    const myTask = await fetchTasks(`${SERVER_ADDRESS}/tasks/${id}`);\n    console.log('myTask', myTask);\n    await updateTaskToggle(myTask.id, {\n      'text': myTask.text,\n      'checked': !myTask.checked\n    });\n    const updatedTask = await fetchTasks(`${SERVER_ADDRESS}/tasks/${id}`);\n    console.log('updatedTask', updatedTask);\n    setTasks(tasks.map(task => task.id === id ? //{ ...task, checked: !task.checked }\n    updatedTask : task));\n  };\n\n  const updateTaskToggle = async (id, taskBody) => {\n    await fetch(`${SERVER_ADDRESS}/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(taskBody)\n    });\n  }; //const remainingTodos = () => { return tasks.filter((task)=>!task.checked).length;}\n\n\n  const remainingTodos = tasks.filter(task => !task.checked).length; //const doneTodos = () => { return tasks.length - remainingTodos() }\n\n  const doneTodos = tasks.length - remainingTodos;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      remainingTodos: remainingTodos,\n      doneTodos: doneTodos,\n      onShowAdd: onShowAdd,\n      showAddTask: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleChecked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 28\n    }, this) : 'You are free :)']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/StefanPopa/Desktop/Learning/Learning/TodoApp/React-Zero-To-Hero/react-task-tracker/src/App.js"],"names":["Header","Tasks","AddTask","useState","useEffect","SERVER_ADDRESS","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","route","res","fetch","data","json","console","log","onShowAdd","addTask","newTask","method","headers","body","JSON","stringify","deleteTask","id","filter","task","toggleChecked","myTask","updateTaskToggle","text","checked","updatedTask","map","taskBody","remainingTodos","length","doneTodos"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport { useState, useEffect } from 'react'\n\nconst SERVER_ADDRESS = 'https://localhost:5001'\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false);\n\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks(SERVER_ADDRESS + '/tasks')\n      setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  const fetchTasks = async (route) => {\n    const res = await fetch(route)\n    const data = await res.json()\n    console.log(data)\n    return data\n  }\n\n  const onShowAdd = () => setShowAddTask(!showAddTask)\n\n  const addTask = async (newTask) => {\n    const res = await fetch(`${SERVER_ADDRESS}/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTask)\n    })\n\n    const data = await res.json()\n    console.log(data);\n    setTasks([...tasks, data])\n  }\n\n  const deleteTask = async (id) => {\n    await fetch(`${SERVER_ADDRESS}/tasks/${id}`, {\n      method: 'DELETE'\n    })\n\n    console.log('delete', id);\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  const toggleChecked = async (id) => {\n    const myTask = await fetchTasks(`${SERVER_ADDRESS}/tasks/${id}`)\n    console.log('myTask', myTask)\n    await updateTaskToggle(myTask.id, { 'text': myTask.text, 'checked': !myTask.checked })\n    const updatedTask = await fetchTasks(`${SERVER_ADDRESS}/tasks/${id}`)\n    console.log('updatedTask', updatedTask);\n    setTasks(tasks.map((task) => task.id === id ?\n      //{ ...task, checked: !task.checked }\n      updatedTask : task))\n  }\n\n  const updateTaskToggle = async (id, taskBody) => {\n    await fetch(`${SERVER_ADDRESS}/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(taskBody)\n    })\n  }\n\n  //const remainingTodos = () => { return tasks.filter((task)=>!task.checked).length;}\n  const remainingTodos = tasks.filter((task) => !task.checked).length;\n  //const doneTodos = () => { return tasks.length - remainingTodos() }\n  const doneTodos = tasks.length - remainingTodos\n  return (\n    <div className=\"container\">\n      <Header remainingTodos={remainingTodos} doneTodos={doneTodos} onShowAdd={onShowAdd} showAddTask={showAddTask} />\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {\n        tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleChecked} /> : 'You are free :)'\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}